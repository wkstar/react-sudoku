{"version":3,"sources":["components/Cell.jsx","logic/SudokuCell.js","helpers/random.js","logic/SudukoGrid.js","components/Layout.js","App.js","serviceWorker.js","index.js","components/Cell.module.css","components/Layout.module.css"],"names":["Cell","props","cell","_useState","useState","getRevealed","getSolution","_useState2","Object","slicedToArray","answer","setAnswer","_useState3","_useState4","correct","setCorrect","cellInputWrongClass","styles","cell_input_wrong","react_default","a","createElement","className","concat","cell_input","value","onChange","event","newAnswer","target","test","isCorrect","toString","VALID_ANSWERS","SudukoCell","index","revealed","classCallCheck","this","coords","getCoords","reset","allCells","neighboursIndexes","getNeighbourIndexes","neighbours","map","cellIndex","solution","validSolutions","newSolution","_this$validSolutions","toArray","validSolution","remainingSolutions","slice","neighbourSolutions","getNeighbourSolutions","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","filter","includes","neighbour","x","y","boxCellCoords","getBoxCellCoords","rowCellCoords","getRowCellCoords","columnCellCoords","getColumnCellCoords","neighbourIndexes","toConsumableArray","translateCoordsToIndex","uniqueNeighbourIndexes","Set","delete","firstCellInBoxCoords","yDifference","xDifference","neighbourX","neighbourY","GRID_CELLS","pow","SudukoGrid","callCount","resetGrid","_this","cells","Array","foo","i","SudokuCell","forEach","initialise","createSolution","Error","currentCell","calculateValidSolutions","getNextValidSolution","setSolution","Layout","layout","key","App","Layout_Layout","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","layout-row"],"mappings":"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","file":"static/js/main.3fe63266.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styles from './Cell.module.css';\n\nexport default function Cell(props) {\n  const { cell } = props;\n  const [answer, setAnswer] = useState(() => {\n    if (cell.getRevealed()) {\n      return cell.getSolution();\n    }\n  });\n  const [correct, setCorrect] = useState();\n\n  const handleAnswerChange = event => {\n    const newAnswer = event.target.value;\n    const isCorrectFormat = /^[0-9]$|^$/g.test(newAnswer);\n    if (isCorrectFormat) {\n      setAnswer(newAnswer);\n    }\n    const isCorrect = cell.getSolution().toString() === newAnswer || newAnswer === '';\n    setCorrect(isCorrect);\n  };\n\n  const cellInputWrongClass = (correct === false) ? styles.cell_input_wrong : '';\n  return (\n    <div className={styles.cell}>\n      <input className={`${styles.cell_input} ${cellInputWrongClass}`} value={answer} onChange={handleAnswerChange} />\n    </div>\n  );\n}\n","import { shuffle } from '../helpers/random';\n\nconst GRID_SIZE = 9;\nconst VALID_ANSWERS = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst BOX_LENGTH = 3;\n\nexport default class SudukoCell {\n  constructor(index, revealed) {\n    this.index = index;\n    this.revealed = revealed;\n    this.coords = this.getCoords(index);\n    this.reset();\n  }\n\n  initialise(allCells) {\n    const neighboursIndexes = this.getNeighbourIndexes();\n    this.neighbours = neighboursIndexes.map(cellIndex => allCells[cellIndex]);\n  }\n\n  reset() {\n    this.solution = null;\n    this.validSolutions = null;\n  }\n\n  getSolution() {\n    return this.solution;\n  }\n\n  setSolution(newSolution) {\n    this.solution = newSolution;\n  }\n\n  getRevealed() {\n    return this.revealed;\n  }\n\n  getNextValidSolution() {\n    const [validSolution, ...remainingSolutions] = this.validSolutions;\n    this.validSolutions = remainingSolutions;\n    return validSolution;\n  }\n\n  calculateValidSolutions() {\n    if (this.validSolutions === null) {\n      const neighbourSolutions = this.getNeighbourSolutions();\n      this.validSolutions = shuffle(\n        VALID_ANSWERS.filter(answer => !neighbourSolutions.includes(answer))\n      );\n    }\n  }\n\n  getNeighbourSolutions() {\n    return this.neighbours.map(neighbour => {\n      return neighbour.getSolution();\n    });\n  }\n\n  translateCoordsToIndex(coords) {\n    const { x, y } = coords;\n\n    return y * GRID_SIZE + x;\n  }\n\n  getNeighbourIndexes() {\n    const boxCellCoords = this.getBoxCellCoords();\n    const rowCellCoords = this.getRowCellCoords();\n    const columnCellCoords = this.getColumnCellCoords();\n    const neighbourCoords = [\n      ...boxCellCoords,\n      ...rowCellCoords,\n      ...columnCellCoords\n    ];\n    const neighbourIndexes = neighbourCoords.map(this.translateCoordsToIndex);\n    const uniqueNeighbourIndexes = new Set(neighbourIndexes);\n\n    // Remove current cell from neighbours\n    uniqueNeighbourIndexes.delete(this.index);\n\n    return [...uniqueNeighbourIndexes];\n  }\n\n  getBoxCellCoords() {\n    const firstCellInBoxCoords = {\n      x: Math.floor(this.coords.x / BOX_LENGTH) * BOX_LENGTH,\n      y: Math.floor(this.coords.y / BOX_LENGTH) * BOX_LENGTH\n    };\n    let boxCellCoords = [];\n    for (let yDifference = 0; yDifference < BOX_LENGTH; yDifference++) {\n      for (let xDifference = 0; xDifference < BOX_LENGTH; xDifference++) {\n        const neighbourX = firstCellInBoxCoords.x + xDifference;\n        const neighbourY = firstCellInBoxCoords.y + yDifference;\n        boxCellCoords = [...boxCellCoords, { x: neighbourX, y: neighbourY }];\n      }\n    }\n    return boxCellCoords;\n  }\n\n  getRowCellCoords() {\n    let columnCellCoords = [];\n    for (let x = 0; x < GRID_SIZE; x++) {\n      columnCellCoords = [\n        ...columnCellCoords,\n        {\n          x,\n          y: this.coords.y\n        }\n      ];\n    }\n    return columnCellCoords;\n  }\n\n  getColumnCellCoords() {\n    let rowCellCoords = [];\n    for (let y = 0; y < GRID_SIZE; y++) {\n      rowCellCoords = [\n        ...rowCellCoords,\n        {\n          x: this.coords.x,\n          y\n        }\n      ];\n    }\n    return rowCellCoords;\n  }\n\n  getCoords() {\n    return {\n      x: this.index % GRID_SIZE,\n      y: Math.floor(this.index / GRID_SIZE)\n    };\n  }\n}\n","export const flipCoin = () => {\n  return Math.random() > 0.5;\n};\n\n// lifted from stack-overflow\nexport const shuffle = array => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n","import SudokuCell from './SudokuCell';\nimport { flipCoin } from '../helpers/random';\n\nconst CALL_COUNT_MAX = 1000;\nconst GRID_DIMENSION = 9;\nconst GRID_CELLS = GRID_DIMENSION ** 2;\n\nexport default class SudukoGrid {\n  constructor() {\n    this.callCount = 0;\n    this.resetGrid();\n  }\n\n  resetGrid() {\n    this.cells = [...Array(GRID_CELLS)].map((foo, i) => {\n      return new SudokuCell(i, flipCoin());\n    });\n    this.cells.forEach(cell => cell.initialise(this.cells));\n    this.createSolution(0);\n  }\n\n  createSolution(cellIndex) {\n    this.callCount++;\n\n    // Infinite loops are bad\n    if (this.callCount > CALL_COUNT_MAX) {\n      throw new Error('Call count maximum exceeded');\n    }\n\n    if (cellIndex === this.cells.length) {\n      return true;\n    }\n\n    const currentCell = this.cells[cellIndex];\n    currentCell.calculateValidSolutions();\n    const validSolution = currentCell.getNextValidSolution();\n\n    if (validSolution) {\n      currentCell.setSolution(validSolution);\n\n      if (this.createSolution(cellIndex + 1)) {\n        return true;\n      } else {\n        return this.createSolution(cellIndex);\n      }\n    } else {\n      currentCell.reset();\n      return false;\n    }\n  }\n}\n","import React, { useState } from 'react';\nimport Cell from './Cell';\nimport styles from './Layout.module.css';\nimport SudukoGrid from '../logic/SudukoGrid';\n\nexport const Layout = function() {\n  const [sudukoGrid] = useState(() => {\n    return new SudukoGrid();\n  });\n\n  const { cells } = sudukoGrid;\n  return (\n    <div className={styles.layout}>\n      <div className={styles['layout-row']}>\n        {cells.map((cell, i) => (\n          <Cell key={i} cell={cell} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Thomas Mead Sudoku App</h2>\n        <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__2t9_7\",\"cell_input\":\"Cell_cell_input__2Disw\",\"cell_input_wrong\":\"Cell_cell_input_wrong__2f2JB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Layout_layout__3OYsd\",\"layout-row\":\"Layout_layout-row__2M8BO\"};"],"sourceRoot":""}